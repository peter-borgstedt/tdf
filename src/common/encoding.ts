export default [
  '\u0000', // 00: Null character                   [NULL]
  '\u0001', // 01: Start of Heading                 [SOH / Ctrl-A]
  '\u0002', // 02: Start of Text                    [STX / Ctrl-B]
  '\u0000', // 03:
  '\u0000', // 04:
  '\u0000', // 05:
  '\u0000', // 06:
  '\u0000', // 07:
  '\u0000', // 08:
  '\u0000', // 09:
  '\u0000', // 10:
  '\u0000', // 11:
  '\u0000', // 12:
  '\u0000', // 13:
  '\u0000', // 14:
  '\u0000', // 15:
  '\u0000', // 16:
  '\u0000', // 17:
  '\u0000', // 18:
  '\u0000', // 19:
  '\u0000', // 20:
  '\u0000', // 21:
  '\u0000', // 22:
  '\u0000', // 23:
  '\u0000', // 24:
  '\u0000', // 25:
  '\u0000', // 26:
  '\u0000', // 27:
  '\u0000', // 28:
  '\u0000', // 29:
  '\u0000', // 30:
  '\u0000', // 31:
];

export const IBM_EXTENDED_CHARACTER_SET = [
  '\u00C7', // 128: Ç
  '\u00FC', // 129: ü,
  '\u00E9', // 130: é
  '\u00E2', // 131: â
  '\u00E4', // 132: ä
  '\u00E0', // 133: à
  '\u00E5', // 134: å
  '\u00E7', // 135: ç
  '\u00EA', // 136: ê
  '\u00EB', // 137: ë
  '\u00E8', // 138: è
  '\u00EF', // 139: ï
  '\u00EE', // 140: î
  '\u00EC', // 141: ì
  '\u00C4', // 142: Ä
  '\u00C5', // 143: Å
  '\u00C9', // 144: É
  '\u00E6', // 145: æ
  '\u00C6', // 146: Æ
  '\u00F4', // 147: ô
  '\u00F6', // 148: ö
  '\u00F2', // 149: ò
  '\u00FB', // 150: û
  '\u00F9', // 151: ù
  '\u00FF', // 152: ÿ
  '\u00D6', // 153: Ö
  '\u00DC', // 154: Ü
  '\u00F8', // 155: ø
  '\u00A3', // 156: £
  '\u00D8', // 157: Ø
  '\u00D7', // 158: ×
  '\u0192', // 159: ƒ
  '\u00E1', // 160: á
  '\u00ED', // 161: í
  '\u00F3', // 162: ó
  '\u00FA', // 163: ú
  '\u00F1', // 164: ñ
  '\u00D1', // 165: Ñ
  '\u00AA', // 166: ª
  '\u00BA', // 167: º
  '\u00BF', // 168: ¿
  '\u00AE', // 169: ®
  '\u00AC', // 170: ¬
  '\u00BD', // 171: ½
  '\u00BC', // 172: ¼
  '\u00A1', // 173: ¡
  '\u00AB', // 174: «
  '\u00BB', // 175: »
  '\u2591', // 176: ░
  '\u2592', // 177: ▒
  '\u2593', // 178: ▓
  '\u2502', // 179: │
  '\u2524', // 180: ┤
  '\u00C1', // 181: Á
  '\u00C2', // 182: Â
  '\u00C0', // 183: À
  '\u00A9', // 184: ©
  '\u2563', // 185: ╣
  '\u2551', // 186: ║
  '\u2557', // 187: ╗
  '\u255D', // 188: ╝
  '\u00A2', // 189: ¢
  '\u00A5', // 190: ¥
  '\u2510', // 191: ┐
  '\u2514', // 192: └
  '\u2534', // 193: ┴
  '\u252C', // 194: ┬
  '\u251C', // 195: ├
  '\u2500', // 196: ─
  '\u253C', // 197: ┼
  '\u00E3', // 198: ã
  '\u00C3', // 199: Ã
  '\u255A', // 200: ╚
  '\u2554', // 201: ╔
  '\u2569', // 202: ╩
  '\u2566', // 203: ╦
  '\u2560', // 204: ╠
  '\u2550', // 205: ═
  '\u256C', // 206: ╬
  '\u00A4', // 207: ¤
  '\u00F0', // 208: ð
  '\u00D0', // 209: Ð
  '\u00CA', // 210: Ê
  '\u00CB', // 211: Ë
  '\u00C8', // 212: È
  '\u0131', // 213: ı
  '\u00CD', // 214: Í
  '\u00CE', // 215: Î
  '\u00CF', // 216: Ï
  '\u2518', // 217: ┘
  '\u250C', // 218: ┌
  '\u2588', // 219: █
  '\u2584', // 220: ▄
  '\u00A6', // 221: ¦
  '\u00CC', // 222: Ì
  '\u2580', // 223: ▀
  '\u00D3', // 224: Ó
  '\u00DF', // 225: ß
  '\u00D4', // 226: Ô
  '\u00D2', // 227: Ò
  '\u00F5', // 228: õ
  '\u00D5', // 229: Õ
  '\u00B5', // 230: µ
  '\u00FE', // 231: þ
  '\u00DE', // 232: Þ
  '\u00DA', // 233: Ú
  '\u00DB', // 234: Û
  '\u00D9', // 235: Ù
  '\u00FD', // 236: ý
  '\u00DD', // 237: Ý
  '\u00AF', // 238: ¯
  '\u00B4', // 239: ´
  '\u2261', // 240: ≡
  '\u00B1', // 241: ±
  '\u2017', // 242: ‗
  '\u00BE', // 243: ¾
  '\u00B6', // 244: ¶
  '\u00A7', // 245: §
  '\u00F7', // 246: ÷
  '\u00B8', // 247: ¸
  '\u00B0', // 248: °
  '\u00A8', // 249: ¨
  '\u00B7', // 250: ·
  '\u00B9', // 251: ¹
  '\u00B3', // 252: ³
  '\u00B2', // 253: ²
  '\u25A0', // 254: ■
  '\u00A0', // 255: Non breaking space
]

export const decode = (char: number) => {
  // (13) Carriage return
  if (char === 0x0D) {
    return '\n';
  }

  // (32) Space
  if (char === 0x20) {
    return ' ';
  }

  // (0-32) ASCII control characters
  if (char < 0x20) {
    return undefined;
  }

  // (128-255) Extended character set
  if (char > 0x7F) {
    return IBM_EXTENDED_CHARACTER_SET[char - 0x80]
  }

  // (33-127) Latin 1
  return String.fromCharCode(char); // uncertain if this will be 100% correct decode
}
